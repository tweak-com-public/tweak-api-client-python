# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.2-alpha.13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class TeamApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def teams_change_stream_get(self, **kwargs):
        """
        Create a change stream.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_change_stream_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str options: 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_change_stream_get_with_http_info(**kwargs)
        else:
            (data) = self.teams_change_stream_get_with_http_info(**kwargs)
            return data

    def teams_change_stream_get_with_http_info(self, **kwargs):
        """
        Create a change stream.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_change_stream_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str options: 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_change_stream_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/change-stream'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'options' in params:
            query_params['options'] = params['options']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='file',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_change_stream_post(self, **kwargs):
        """
        Create a change stream.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_change_stream_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str options: 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_change_stream_post_with_http_info(**kwargs)
        else:
            (data) = self.teams_change_stream_post_with_http_info(**kwargs)
            return data

    def teams_change_stream_post_with_http_info(self, **kwargs):
        """
        Create a change stream.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_change_stream_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str options: 
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['options']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_change_stream_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/change-stream'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'options' in params:
            form_params.append(('options', params['options']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='file',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_count_get(self, **kwargs):
        """
        Count instances of the model matched by where from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_count_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_count_get_with_http_info(**kwargs)
        else:
            (data) = self.teams_count_get_with_http_info(**kwargs)
            return data

    def teams_count_get_with_http_info(self, **kwargs):
        """
        Count instances of the model matched by where from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_count_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_count_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/count'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_find_one_get(self, **kwargs):
        """
        Find first instance of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_find_one_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_find_one_get_with_http_info(**kwargs)
        else:
            (data) = self.teams_find_one_get_with_http_info(**kwargs)
            return data

    def teams_find_one_get_with_http_info(self, **kwargs):
        """
        Find first instance of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_find_one_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_find_one_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/findOne'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_get(self, **kwargs):
        """
        Find all instances of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_get_with_http_info(**kwargs)
        else:
            (data) = self.teams_get_with_http_info(**kwargs)
            return data

    def teams_get_with_http_info(self, **kwargs):
        """
        Find all instances of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Team]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_auth_reset_keys_delete(self, id, **kwargs):
        """
        Reset Team keys
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_auth_reset_keys_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_auth_reset_keys_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_auth_reset_keys_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_auth_reset_keys_delete_with_http_info(self, id, **kwargs):
        """
        Reset Team keys
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_auth_reset_keys_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_auth_reset_keys_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_auth_reset_keys_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/auth/reset-keys'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_brand_delete(self, id, **kwargs):
        """
        Deletes brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_brand_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_brand_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_brand_delete_with_http_info(self, id, **kwargs):
        """
        Deletes brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_brand_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_brand_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/brand'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_brand_get(self, id, **kwargs):
        """
        Fetches hasOne relation brand.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param bool refresh: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_brand_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_brand_get_with_http_info(id, **kwargs)
            return data

    def teams_id_brand_get_with_http_info(self, id, **kwargs):
        """
        Fetches hasOne relation brand.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param bool refresh: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_brand_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_brand_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/brand'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBrand',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_brand_post(self, id, **kwargs):
        """
        Creates a new instance in brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBrand data: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_brand_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_brand_post_with_http_info(id, **kwargs)
            return data

    def teams_id_brand_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBrand data: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_brand_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_brand_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/brand'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBrand',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_brand_put(self, id, **kwargs):
        """
        Update brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBrand data: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_brand_put_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_brand_put_with_http_info(id, **kwargs)
            return data

    def teams_id_brand_put_with_http_info(self, id, **kwargs):
        """
        Update brand of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_brand_put_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBrand data: 
        :return: TeamBrand
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_brand_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_brand_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/brand'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBrand',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_count_get(self, id, **kwargs):
        """
        Counts builderConfigs of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_builder_configs_count_get_with_http_info(self, id, **kwargs):
        """
        Counts builderConfigs of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_default_get(self, id, **kwargs):
        """
        Get default TeamBuilderConfig
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_default_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_default_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_default_get_with_http_info(id, **kwargs)
            return data

    def teams_id_builder_configs_default_get_with_http_info(self, id, **kwargs):
        """
        Get default TeamBuilderConfig
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_default_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_default_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_default_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/default'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_delete(self, id, **kwargs):
        """
        Deletes all builderConfigs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_builder_configs_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all builderConfigs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_builder_configs_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_builder_configs_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_fk_logo_put(self, id, fk, data, **kwargs):
        """
        Change Builder Config logo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_logo_put(id, fk, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: BuilderConfig id (required)
        :param Team data: Logo (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_fk_logo_put_with_http_info(id, fk, data, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_fk_logo_put_with_http_info(id, fk, data, **kwargs)
            return data

    def teams_id_builder_configs_fk_logo_put_with_http_info(self, id, fk, data, **kwargs):
        """
        Change Builder Config logo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_logo_put_with_http_info(id, fk, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: BuilderConfig id (required)
        :param Team data: Logo (required)
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_fk_logo_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_fk_logo_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_fk_logo_put`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `teams_id_builder_configs_fk_logo_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{fk}/logo'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :param TeamBuilderConfig data: 
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_builder_configs_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for builderConfigs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for builderConfigs (required)
        :param TeamBuilderConfig data: 
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_get(self, id, **kwargs):
        """
        Queries builderConfigs of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamBuilderConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_get_with_http_info(id, **kwargs)
            return data

    def teams_id_builder_configs_get_with_http_info(self, id, **kwargs):
        """
        Queries builderConfigs of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamBuilderConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamBuilderConfig]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_count_get(self, id, nk, **kwargs):
        """
        Counts productGroups of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts productGroups of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_delete(self, id, nk, **kwargs):
        """
        Deletes all productGroups of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all productGroups of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :param ProductGroup data: 
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :param ProductGroup data: 
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_get(self, id, nk, **kwargs):
        """
        Queries productGroups of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries productGroups of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductGroup]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_post(self, id, nk, **kwargs):
        """
        Creates a new instance in productGroups of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductGroup data: 
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in productGroups of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductGroup data: 
        :return: ProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the productGroups relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the productGroups relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of productGroups relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of productGroups relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_groups_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :param TeamBuilderConfigProductGroup data: 
        :return: TeamBuilderConfigProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_groups_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_groups_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_groups_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productGroups.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_groups_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productGroups (required)
        :param TeamBuilderConfigProductGroup data: 
        :return: TeamBuilderConfigProductGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_groups_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_groups_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productGroups/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductGroup',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_count_get(self, id, nk, **kwargs):
        """
        Counts productSizeMaterials of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts productSizeMaterials of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_delete(self, id, nk, **kwargs):
        """
        Deletes all productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_get(self, id, nk, **kwargs):
        """
        Queries productSizeMaterials of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries productSizeMaterials of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductSizeMaterial]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_post(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_count_get(self, id, nk, **kwargs):
        """
        Counts productSizeMaterialsRel of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts productSizeMaterialsRel of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_delete(self, id, nk, **kwargs):
        """
        Deletes all productSizeMaterialsRel of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all productSizeMaterialsRel of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the productSizeMaterials relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the productSizeMaterials relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_delete_0`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of productSizeMaterials relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of productSizeMaterials relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterials/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterialsRel.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizeMaterialsRel (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_fk_put_0`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_get(self, id, nk, **kwargs):
        """
        Queries productSizeMaterialsRel of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[TeamBuilderConfigProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries productSizeMaterialsRel of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[TeamBuilderConfigProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamBuilderConfigProductSizeMaterial]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_size_materials_rel_post(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizeMaterialsRel of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_size_materials_rel_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_size_materials_rel_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_size_materials_rel_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizeMaterialsRel of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_size_materials_rel_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param TeamBuilderConfigProductSizeMaterial data: 
        :return: TeamBuilderConfigProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_size_materials_rel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_size_materials_rel_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_size_materials_rel_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizeMaterialsRel'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_count_get(self, id, nk, **kwargs):
        """
        Counts productSizes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts productSizes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_delete(self, id, nk, **kwargs):
        """
        Deletes all productSizes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all productSizes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSize',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :param ProductSize data: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :param ProductSize data: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSize',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_get(self, id, nk, **kwargs):
        """
        Queries productSizes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductSize]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries productSizes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductSize]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductSize]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_post(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductSize data: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in productSizes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductSize data: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSize',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the productSizes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the productSizes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of productSizes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of productSizes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_sizes_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :param TeamBuilderConfigProductSize data: 
        :return: TeamBuilderConfigProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_sizes_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_sizes_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_sizes_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productSizes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_sizes_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productSizes (required)
        :param TeamBuilderConfigProductSize data: 
        :return: TeamBuilderConfigProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_sizes_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_sizes_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productSizes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductSize',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_count_get(self, id, nk, **kwargs):
        """
        Counts productTypes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts productTypes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_delete(self, id, nk, **kwargs):
        """
        Deletes all productTypes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all productTypes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductType',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :param ProductType data: 
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :param ProductType data: 
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductType',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_get(self, id, nk, **kwargs):
        """
        Queries productTypes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries productTypes of TeamBuilderConfig.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str filter: 
        :return: list[ProductType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductType]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_post(self, id, nk, **kwargs):
        """
        Creates a new instance in productTypes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductType data: 
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in productTypes of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param ProductType data: 
        :return: ProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductType',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the productTypes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the productTypes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of productTypes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of productTypes relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_product_types_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :param TeamBuilderConfigProductType data: 
        :return: TeamBuilderConfigProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_product_types_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_product_types_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_builder_configs_nk_product_types_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for productTypes.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_product_types_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param str fk: Foreign key for productTypes (required)
        :param TeamBuilderConfigProductType data: 
        :return: TeamBuilderConfigProductType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_product_types_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_product_types_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_builder_configs_nk_product_types_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/productTypes/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfigProductType',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_builder_configs_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for builderConfigs. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_builder_configs_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_builder_configs_post(self, id, **kwargs):
        """
        Creates a new instance in builderConfigs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBuilderConfig data: 
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_builder_configs_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_builder_configs_post_with_http_info(id, **kwargs)
            return data

    def teams_id_builder_configs_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in builderConfigs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_builder_configs_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamBuilderConfig data: 
        :return: TeamBuilderConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_builder_configs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_builder_configs_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/builderConfigs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamBuilderConfig',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_count_get(self, id, **kwargs):
        """
        Counts dataSources of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_data_sources_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_data_sources_count_get_with_http_info(self, id, **kwargs):
        """
        Counts dataSources of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_delete(self, id, **kwargs):
        """
        Deletes all dataSources of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_data_sources_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_data_sources_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all dataSources of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_data_sources_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_data_sources_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_data_sources_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_data_sources_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_data_sources_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_data_sources_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :param DataSource data: 
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_data_sources_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_data_sources_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for dataSources.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dataSources (required)
        :param DataSource data: 
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_data_sources_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_get(self, id, **kwargs):
        """
        Queries dataSources of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[DataSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_data_sources_get_with_http_info(id, **kwargs)
            return data

    def teams_id_data_sources_get_with_http_info(self, id, **kwargs):
        """
        Queries dataSources of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[DataSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DataSource]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_data_sources_post(self, id, **kwargs):
        """
        Creates a new instance in dataSources of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param DataSource data: 
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_data_sources_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_data_sources_post_with_http_info(id, **kwargs)
            return data

    def teams_id_data_sources_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in dataSources of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_data_sources_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param DataSource data: 
        :return: DataSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_data_sources_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_data_sources_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dataSources'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_delete(self, id, **kwargs):
        """
        Delete a model instance by {{id}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_delete_with_http_info(self, id, **kwargs):
        """
        Delete a model instance by {{id}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_count_get(self, id, **kwargs):
        """
        Counts dynamicDatas of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_dynamic_datas_count_get_with_http_info(self, id, **kwargs):
        """
        Counts dynamicDatas of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_delete(self, id, **kwargs):
        """
        Deletes all dynamicDatas of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_dynamic_datas_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all dynamicDatas of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :param DynamicData data: 
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for dynamicDatas.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for dynamicDatas (required)
        :param DynamicData data: 
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_get(self, id, **kwargs):
        """
        Queries dynamicDatas of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[DynamicData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_get_with_http_info(id, **kwargs)
            return data

    def teams_id_dynamic_datas_get_with_http_info(self, id, **kwargs):
        """
        Queries dynamicDatas of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[DynamicData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DynamicData]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_count_get(self, id, nk, **kwargs):
        """
        Counts designs of DynamicData.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts designs of DynamicData.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_delete(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_designs_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_designs_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_designs_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_get(self, id, nk, **kwargs):
        """
        Queries designs of DynamicData.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries designs of DynamicData.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Design]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_designs_post(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_designs_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_designs_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_designs_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_designs_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_designs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_designs_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_designs_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_count_get(self, id, nk, **kwargs):
        """
        Count Dynamic Data records
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Count Dynamic Data records
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_delete(self, id, nk, **kwargs):
        """
        Delete all matching records.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: filter.where object
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_delete_with_http_info(self, id, nk, **kwargs):
        """
        Delete all matching records.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str where: filter.where object
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'where' in params:
            form_params.append(('where', params['where']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a model instance by {{fk}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a model instance by {{fk}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_records_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a model instance by {{fk}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a model instance by {{fk}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_records_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_fk_put(self, id, nk, fk, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :param Team data: Model instance data
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str fk: Model id (required)
        :param Team data: Model instance data
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_dynamic_datas_nk_records_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_get(self, id, nk, **kwargs):
        """
        Find all instances of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_get_with_http_info(self, id, nk, **kwargs):
        """
        Find all instances of the model matched by filter from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param str filter: Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_migrate_post(self, id, nk, **kwargs):
        """
        Request migration for Dynamic Data records
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_migrate_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Team data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_migrate_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_migrate_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_migrate_post_with_http_info(self, id, nk, **kwargs):
        """
        Request migration for Dynamic Data records
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_migrate_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Team data: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_migrate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_migrate_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_migrate_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/migrate'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_post(self, id, nk, **kwargs):
        """
        Create a new instance of the model and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Team data: Model instance data
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_post_with_http_info(self, id, nk, **kwargs):
        """
        Create a new instance of the model and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param Team data: Model instance data
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_records_upload_csv_post(self, id, nk, **kwargs):
        """
        Upload CSV for this Dynamic Data
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_upload_csv_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_records_upload_csv_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_records_upload_csv_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_records_upload_csv_post_with_http_info(self, id, nk, **kwargs):
        """
        Upload CSV for this Dynamic Data
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_records_upload_csv_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_records_upload_csv_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_records_upload_csv_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_records_upload_csv_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/records/upload/csv'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_dynamic_datas_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for dynamicDatas. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_dynamic_datas_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_dynamic_datas_post(self, id, **kwargs):
        """
        Creates a new instance in dynamicDatas of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param DynamicData data: 
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_dynamic_datas_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_dynamic_datas_post_with_http_info(id, **kwargs)
            return data

    def teams_id_dynamic_datas_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in dynamicDatas of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_dynamic_datas_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param DynamicData data: 
        :return: DynamicData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_dynamic_datas_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_dynamic_datas_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/dynamicDatas'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DynamicData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_exists_get(self, id, **kwargs):
        """
        Check whether a model instance exists in the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_exists_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_exists_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_exists_get_with_http_info(id, **kwargs)
            return data

    def teams_id_exists_get_with_http_info(self, id, **kwargs):
        """
        Check whether a model instance exists in the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_exists_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_exists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_exists_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/exists'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_get(self, id, **kwargs):
        """
        Find a model instance by {{id}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_get_with_http_info(id, **kwargs)
            return data

    def teams_id_get_with_http_info(self, id, **kwargs):
        """
        Find a model instance by {{id}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_head(self, id, **kwargs):
        """
        Check whether a model instance exists in the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_head(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_head_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_head_with_http_info(id, **kwargs)
            return data

    def teams_id_head_with_http_info(self, id, **kwargs):
        """
        Check whether a model instance exists in the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_head_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_count_get(self, id, **kwargs):
        """
        Counts imageFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_image_folders_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_image_folders_count_get_with_http_info(self, id, **kwargs):
        """
        Counts imageFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_delete(self, id, **kwargs):
        """
        Deletes all imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_image_folders_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_image_folders_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_image_folders_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_image_folders_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_image_folders_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for imageFolders (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_get(self, id, **kwargs):
        """
        Queries imageFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_image_folders_get_with_http_info(id, **kwargs)
            return data

    def teams_id_image_folders_get_with_http_info(self, id, **kwargs):
        """
        Queries imageFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ImageFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_count_get(self, id, nk, **kwargs):
        """
        Counts children of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts children of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_delete(self, id, nk, **kwargs):
        """
        Deletes all children of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all children of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_children_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_children_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for children.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for children (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_children_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_get(self, id, nk, **kwargs):
        """
        Queries children of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries children of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ImageFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_children_post(self, id, nk, **kwargs):
        """
        Creates a new instance in children of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_children_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_children_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_children_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in children of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_children_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_children_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_children_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_children_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/children'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_count_get(self, id, nk, **kwargs):
        """
        Counts folderMembers of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts folderMembers of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_delete(self, id, nk, **kwargs):
        """
        Deletes all folderMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all folderMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_folder_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_folder_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolderMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for folderMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for folderMembers (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_folder_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolderMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_get(self, id, nk, **kwargs):
        """
        Queries folderMembers of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[ImageFolderMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries folderMembers of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[ImageFolderMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ImageFolderMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_folder_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in folderMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_folder_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_folder_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_folder_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in folderMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_folder_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_folder_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_folder_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_folder_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/folderMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolderMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_count_get(self, id, nk, **kwargs):
        """
        Counts images of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts images of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_delete(self, id, nk, **kwargs):
        """
        Deletes all images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_images_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_images_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for images (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_images_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_get(self, id, nk, **kwargs):
        """
        Queries images of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries images of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Image]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_images_post(self, id, nk, **kwargs):
        """
        Creates a new instance in images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_images_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_images_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_images_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_images_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_images_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_images_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_images_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_count_get(self, id, nk, **kwargs):
        """
        Counts members of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts members of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_delete(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_get(self, id, nk, **kwargs):
        """
        Queries members of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries members of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_members_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_members_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_members_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for members (required)
        :param ImageFolderMember data: 
        :return: ImageFolderMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_members_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_members_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_members_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_members_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolderMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_parent_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation parent.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_parent_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param bool refresh: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_parent_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_parent_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_parent_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation parent.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_parent_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param bool refresh: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_parent_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_parent_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_parent_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/parent'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_count_get(self, id, nk, **kwargs):
        """
        Counts portals of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts portals of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_delete(self, id, nk, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_get(self, id, nk, **kwargs):
        """
        Queries portals of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries portals of ImageFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Portal]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_post(self, id, nk, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_portals_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :param PortalImageFolder data: 
        :return: PortalImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_portals_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_portals_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_image_folders_nk_portals_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_portals_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param str fk: Foreign key for portals (required)
        :param PortalImageFolder data: 
        :return: PortalImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_portals_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_portals_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_portals_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_image_folders_nk_portals_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_image_folders_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_image_folders_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for imageFolders. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_image_folders_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_image_folders_post(self, id, **kwargs):
        """
        Creates a new instance in imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_image_folders_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_image_folders_post_with_http_info(id, **kwargs)
            return data

    def teams_id_image_folders_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_image_folders_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_image_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_image_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_count_get(self, id, **kwargs):
        """
        Counts images of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_images_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_images_count_get_with_http_info(self, id, **kwargs):
        """
        Counts images of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_delete(self, id, **kwargs):
        """
        Deletes all images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_images_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_images_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_images_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_images_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_images_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_images_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_images_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_images_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_images_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_images_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for images.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for images (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_images_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_get(self, id, **kwargs):
        """
        Queries images of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_images_get_with_http_info(id, **kwargs)
            return data

    def teams_id_images_get_with_http_info(self, id, **kwargs):
        """
        Queries images of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Image]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_nk_folder_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation folder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_nk_folder_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for images. (required)
        :param bool refresh: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_nk_folder_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_images_nk_folder_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_images_nk_folder_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation folder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_nk_folder_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for images. (required)
        :param bool refresh: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_nk_folder_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_nk_folder_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_images_nk_folder_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/{nk}/folder'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for images. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_images_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_images_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for images. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_images_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_images_post(self, id, **kwargs):
        """
        Creates a new instance in images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_images_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_images_post_with_http_info(id, **kwargs)
            return data

    def teams_id_images_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in images of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_images_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Image data: 
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_images_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_images_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/images'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Image',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_invitation_tickets_fk_delete(self, id, id2, fk, **kwargs):
        """
        Delete InvitationTickets for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_fk_delete(id, id2, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str fk: InvitationTicket id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_invitation_tickets_fk_delete_with_http_info(id, id2, fk, **kwargs)
        else:
            (data) = self.teams_id_invitation_tickets_fk_delete_with_http_info(id, id2, fk, **kwargs)
            return data

    def teams_id_invitation_tickets_fk_delete_with_http_info(self, id, id2, fk, **kwargs):
        """
        Delete InvitationTickets for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_fk_delete_with_http_info(id, id2, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str fk: InvitationTicket id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_invitation_tickets_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_invitation_tickets_fk_delete`")
        # verify the required parameter 'id2' is set
        if ('id2' not in params) or (params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `teams_id_invitation_tickets_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_invitation_tickets_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/invitationTickets/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id2' in params:
            path_params['id'] = params['id2']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_invitation_tickets_fk_get(self, id, id2, fk, **kwargs):
        """
        Get InvitationTicket by Id for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_fk_get(id, id2, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str fk: InvitationTicket id (required)
        :param str filter: Only include changes that match this filter
        :return: InvitationTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_invitation_tickets_fk_get_with_http_info(id, id2, fk, **kwargs)
        else:
            (data) = self.teams_id_invitation_tickets_fk_get_with_http_info(id, id2, fk, **kwargs)
            return data

    def teams_id_invitation_tickets_fk_get_with_http_info(self, id, id2, fk, **kwargs):
        """
        Get InvitationTicket by Id for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_fk_get_with_http_info(id, id2, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str fk: InvitationTicket id (required)
        :param str filter: Only include changes that match this filter
        :return: InvitationTicket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'fk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_invitation_tickets_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_invitation_tickets_fk_get`")
        # verify the required parameter 'id2' is set
        if ('id2' not in params) or (params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `teams_id_invitation_tickets_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_invitation_tickets_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/invitationTickets/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id2' in params:
            path_params['id'] = params['id2']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InvitationTicket',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_invitation_tickets_get(self, id, id2, **kwargs):
        """
        List InvitationTickets for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_get(id, id2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[InvitationTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_invitation_tickets_get_with_http_info(id, id2, **kwargs)
        else:
            (data) = self.teams_id_invitation_tickets_get_with_http_info(id, id2, **kwargs)
            return data

    def teams_id_invitation_tickets_get_with_http_info(self, id, id2, **kwargs):
        """
        List InvitationTickets for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_invitation_tickets_get_with_http_info(id, id2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[InvitationTicket]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_invitation_tickets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_invitation_tickets_get`")
        # verify the required parameter 'id2' is set
        if ('id2' not in params) or (params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `teams_id_invitation_tickets_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/invitationTickets'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id2' in params:
            path_params['id'] = params['id2']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[InvitationTicket]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_logo_put(self, id, id2, data, **kwargs):
        """
        Change logo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_logo_put(id, id2, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param Team data: Logo (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_logo_put_with_http_info(id, id2, data, **kwargs)
        else:
            (data) = self.teams_id_logo_put_with_http_info(id, id2, data, **kwargs)
            return data

    def teams_id_logo_put_with_http_info(self, id, id2, data, **kwargs):
        """
        Change logo
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_logo_put_with_http_info(id, id2, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param Team data: Logo (required)
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_logo_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_logo_put`")
        # verify the required parameter 'id2' is set
        if ('id2' not in params) or (params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `teams_id_logo_put`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `teams_id_logo_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/logo'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id2' in params:
            path_params['id'] = params['id2']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_count_get(self, id, **kwargs):
        """
        Counts members of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_members_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_members_count_get_with_http_info(self, id, **kwargs):
        """
        Counts members of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_delete(self, id, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_members_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_members_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Customer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :param Customer data: 
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :param Customer data: 
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Customer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_get(self, id, **kwargs):
        """
        Queries members of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Customer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_members_get_with_http_info(id, **kwargs)
            return data

    def teams_id_members_get_with_http_info(self, id, **kwargs):
        """
        Queries members of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Customer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Customer]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_post(self, id, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Customer data: 
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_members_post_with_http_info(id, **kwargs)
            return data

    def teams_id_members_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Customer data: 
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Customer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_rel_fk_delete(self, id, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_rel_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_rel_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_rel_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_rel_fk_head(self, id, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_head(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_rel_fk_head_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_rel_fk_head_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_rel_fk_head_with_http_info(self, id, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_head_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_members_rel_fk_put(self, id, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_members_rel_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_members_rel_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_members_rel_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_members_rel_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_members_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_members_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_members_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_patch(self, id, **kwargs):
        """
        Patch attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_patch(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Team data: An object of model property name/value pairs
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_patch_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_patch_with_http_info(id, **kwargs)
            return data

    def teams_id_patch_with_http_info(self, id, **kwargs):
        """
        Patch attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_patch_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Team data: An object of model property name/value pairs
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_patch`")


        collection_formats = {}

        resource_path = '/Teams/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_permission_delete(self, id, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_permission_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_permission_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_permission_delete_with_http_info(self, id, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_permission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_permission_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_permission_get(self, id, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param bool refresh: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_permission_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_permission_get_with_http_info(id, **kwargs)
            return data

    def teams_id_permission_get_with_http_info(self, id, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param bool refresh: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_permission_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_permission_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_permission_post(self, id, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamPermissionSet data: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_permission_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_permission_post_with_http_info(id, **kwargs)
            return data

    def teams_id_permission_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamPermissionSet data: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_permission_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_permission_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_permission_put(self, id, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamPermissionSet data: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_permission_put_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_permission_put_with_http_info(id, **kwargs)
            return data

    def teams_id_permission_put_with_http_info(self, id, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_permission_put_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamPermissionSet data: 
        :return: TeamPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_permission_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_permission_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_count_get(self, id, **kwargs):
        """
        Counts portals of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_portals_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_portals_count_get_with_http_info(self, id, **kwargs):
        """
        Counts portals of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_delete(self, id, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_portals_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_portals_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_portals_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_portals_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_portals_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_get(self, id, **kwargs):
        """
        Queries portals of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_portals_get_with_http_info(id, **kwargs)
            return data

    def teams_id_portals_get_with_http_info(self, id, **kwargs):
        """
        Queries portals of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Portal]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_count_get(self, id, nk, **kwargs):
        """
        Counts designFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts designFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_delete(self, id, nk, **kwargs):
        """
        Deletes all designFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all designFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_design_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_design_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DesignFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :param DesignFolder data: 
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designFolders (required)
        :param DesignFolder data: 
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_design_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DesignFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_get(self, id, nk, **kwargs):
        """
        Queries designFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[DesignFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries designFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[DesignFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DesignFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_design_folders_post(self, id, nk, **kwargs):
        """
        Creates a new instance in designFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param DesignFolder data: 
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_design_folders_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_design_folders_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_design_folders_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in designFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_design_folders_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param DesignFolder data: 
        :return: DesignFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_design_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_design_folders_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_design_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DesignFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_count_get(self, id, nk, **kwargs):
        """
        Counts designs of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_designs_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts designs of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_delete(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_designs_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_designs_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_designs_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_designs_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_designs_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_designs_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_designs_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_get(self, id, nk, **kwargs):
        """
        Queries designs of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_designs_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries designs of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Design]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_designs_post(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_designs_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_designs_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_designs_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_designs_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_designs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_designs_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_designs_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_count_get(self, id, nk, **kwargs):
        """
        Counts imageFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts imageFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_delete(self, id, nk, **kwargs):
        """
        Deletes all imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_get(self, id, nk, **kwargs):
        """
        Queries imageFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries imageFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[ImageFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ImageFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_post(self, id, nk, **kwargs):
        """
        Creates a new instance in imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in imageFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param ImageFolder data: 
        :return: ImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the imageFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the imageFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of imageFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of imageFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_image_folders_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :param PortalImageFolder data: 
        :return: PortalImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_image_folders_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_image_folders_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_image_folders_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for imageFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_image_folders_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for imageFolders (required)
        :param PortalImageFolder data: 
        :return: PortalImageFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_image_folders_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_image_folders_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_image_folders_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_image_folders_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/imageFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalImageFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_count_get(self, id, nk, **kwargs):
        """
        Counts members of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts members of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_delete(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_get(self, id, nk, **kwargs):
        """
        Queries members of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries members of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_members_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_members_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_members_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for members (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_members_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_members_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_members_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_members_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_permission_delete(self, id, nk, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_permission_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_permission_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_permission_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_permission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_permission_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_permission_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_permission_get(self, id, nk, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param bool refresh: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_permission_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_permission_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_permission_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param bool refresh: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_permission_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_permission_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_permission_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_permission_post(self, id, nk, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalPermissionSet data: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_permission_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_permission_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_permission_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalPermissionSet data: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_permission_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_permission_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_permission_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_permission_put(self, id, nk, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_put(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalPermissionSet data: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_permission_put_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_permission_put_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_permission_put_with_http_info(self, id, nk, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_permission_put_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalPermissionSet data: 
        :return: PortalPermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_permission_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_permission_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_permission_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalPermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_count_get(self, id, nk, **kwargs):
        """
        Counts portalMembers of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts portalMembers of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_delete(self, id, nk, **kwargs):
        """
        Deletes all portalMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all portalMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_portal_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_portal_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portalMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for portalMembers (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_portal_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_get(self, id, nk, **kwargs):
        """
        Queries portalMembers of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries portalMembers of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[PortalMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_portal_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in portalMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_portal_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_portal_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_portal_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in portalMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_portal_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalMember data: 
        :return: PortalMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_portal_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_portal_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_portal_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/portalMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_count_get(self, id, nk, **kwargs):
        """
        Counts templateFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts templateFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_delete(self, id, nk, **kwargs):
        """
        Deletes all templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateFolders (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_get(self, id, nk, **kwargs):
        """
        Queries templateFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries templateFolders of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[PortalTemplateFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_folders_post(self, id, nk, **kwargs):
        """
        Creates a new instance in templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_folders_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_folders_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_folders_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_folders_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_folders_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_count_get(self, id, nk, **kwargs):
        """
        Counts templateRels of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts templateRels of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_delete(self, id, nk, **kwargs):
        """
        Deletes all templateRels of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all templateRels of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_rels_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_rels_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateRels.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templateRels (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_template_rels_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_get(self, id, nk, **kwargs):
        """
        Queries templateRels of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries templateRels of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[PortalTemplate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[PortalTemplate]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_template_rels_post(self, id, nk, **kwargs):
        """
        Creates a new instance in templateRels of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_template_rels_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_template_rels_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_template_rels_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in templateRels of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_template_rels_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_template_rels_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_template_rels_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_template_rels_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templateRels'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_count_get(self, id, nk, **kwargs):
        """
        Counts templates of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_templates_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts templates of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_delete(self, id, nk, **kwargs):
        """
        Deletes all templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_templates_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_get(self, id, nk, **kwargs):
        """
        Queries templates of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_templates_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries templates of Portal.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str filter: 
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Template]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_post(self, id, nk, **kwargs):
        """
        Creates a new instance in templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_portals_nk_templates_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the templates relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the templates relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of templates relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of templates relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_nk_templates_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_nk_templates_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_portals_nk_templates_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_portals_nk_templates_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_nk_templates_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for portals. (required)
        :param str fk: Foreign key for templates (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_nk_templates_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_nk_templates_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_portals_nk_templates_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_portals_nk_templates_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals/{nk}/templates/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_portals_post(self, id, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_portals_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_portals_post_with_http_info(id, **kwargs)
            return data

    def teams_id_portals_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_portals_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_portals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_portals_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_count_get(self, id, **kwargs):
        """
        Counts productMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_materials_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_product_materials_count_get_with_http_info(self, id, **kwargs):
        """
        Counts productMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_delete(self, id, **kwargs):
        """
        Deletes all productMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_materials_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_product_materials_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all productMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_materials_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_materials_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_materials_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_materials_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_materials_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_materials_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :param ProductMaterial data: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_materials_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_materials_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for productMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productMaterials (required)
        :param ProductMaterial data: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_materials_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_get(self, id, **kwargs):
        """
        Queries productMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ProductMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_materials_get_with_http_info(id, **kwargs)
            return data

    def teams_id_product_materials_get_with_http_info(self, id, **kwargs):
        """
        Queries productMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ProductMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductMaterial]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productMaterials. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_product_materials_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_product_materials_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productMaterials. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_product_materials_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_materials_post(self, id, **kwargs):
        """
        Creates a new instance in productMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ProductMaterial data: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_materials_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_materials_post_with_http_info(id, **kwargs)
            return data

    def teams_id_product_materials_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in productMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_materials_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ProductMaterial data: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_materials_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_materials_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_count_get(self, id, **kwargs):
        """
        Counts productSizeMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_product_size_materials_count_get_with_http_info(self, id, **kwargs):
        """
        Counts productSizeMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_delete(self, id, **kwargs):
        """
        Deletes all productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_product_size_materials_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_size_materials_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_size_materials_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_size_materials_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_size_materials_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_product_size_materials_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for productSizeMaterials.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for productSizeMaterials (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_product_size_materials_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_get(self, id, **kwargs):
        """
        Queries productSizeMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_get_with_http_info(id, **kwargs)
            return data

    def teams_id_product_size_materials_get_with_http_info(self, id, **kwargs):
        """
        Queries productSizeMaterials of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[ProductSizeMaterial]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProductSizeMaterial]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_nk_material_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation material.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_material_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_nk_material_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_nk_material_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_product_size_materials_nk_material_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation material.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_material_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: ProductMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_nk_material_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_nk_material_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_product_size_materials_nk_material_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{nk}/material'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_nk_size_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation size.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_size_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_nk_size_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_nk_size_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_product_size_materials_nk_size_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation size.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_size_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: ProductSize
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_nk_size_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_nk_size_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_product_size_materials_nk_size_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{nk}/size'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSize',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_product_size_materials_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for productSizeMaterials. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_product_size_materials_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_product_size_materials_post(self, id, **kwargs):
        """
        Creates a new instance in productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_product_size_materials_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_product_size_materials_post_with_http_info(id, **kwargs)
            return data

    def teams_id_product_size_materials_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in productSizeMaterials of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_product_size_materials_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param ProductSizeMaterial data: 
        :return: ProductSizeMaterial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_product_size_materials_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_product_size_materials_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/productSizeMaterials'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProductSizeMaterial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_put(self, id, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_put_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_put_with_http_info(id, **kwargs)
            return data

    def teams_id_put_with_http_info(self, id, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_put_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_replace_post(self, id, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_replace_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_replace_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_replace_post_with_http_info(id, **kwargs)
            return data

    def teams_id_replace_post_with_http_info(self, id, **kwargs):
        """
        Replace attributes for a model instance and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_replace_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Model id (required)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_replace_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_replace_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/replace'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_count_get(self, id, **kwargs):
        """
        Counts teamMembers of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_team_members_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_team_members_count_get_with_http_info(self, id, **kwargs):
        """
        Counts teamMembers of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_delete(self, id, **kwargs):
        """
        Deletes all teamMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_team_members_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_team_members_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all teamMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_team_members_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_team_members_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_team_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_team_members_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_team_members_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_team_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_team_members_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_team_members_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for teamMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for teamMembers (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_team_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_get(self, id, **kwargs):
        """
        Queries teamMembers of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_team_members_get_with_http_info(id, **kwargs)
            return data

    def teams_id_team_members_get_with_http_info(self, id, **kwargs):
        """
        Queries teamMembers of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_map_keys_get(self, id, data, **kwargs):
        """
        Map teamMembers emails to teamMembers keys
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_map_keys_get(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Team data: TeamMember(s) email (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_map_keys_get_with_http_info(id, data, **kwargs)
        else:
            (data) = self.teams_id_team_members_map_keys_get_with_http_info(id, data, **kwargs)
            return data

    def teams_id_team_members_map_keys_get_with_http_info(self, id, data, **kwargs):
        """
        Map teamMembers emails to teamMembers keys
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_map_keys_get_with_http_info(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Team data: TeamMember(s) email (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_map_keys_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_map_keys_get`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `teams_id_team_members_map_keys_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers/map-keys'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_team_members_post(self, id, **kwargs):
        """
        Creates a new instance in teamMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_team_members_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_team_members_post_with_http_info(id, **kwargs)
            return data

    def teams_id_team_members_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in teamMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_team_members_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_team_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_team_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/teamMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_count_get(self, id, **kwargs):
        """
        Counts templateFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_template_folders_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_template_folders_count_get_with_http_info(self, id, **kwargs):
        """
        Counts templateFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_delete(self, id, **kwargs):
        """
        Deletes all templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_template_folders_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_template_folders_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_template_folders_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_template_folders_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_template_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_template_folders_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_template_folders_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_template_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :param TeamTemplateFolder data: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_template_folders_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_template_folders_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for templateFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templateFolders (required)
        :param TeamTemplateFolder data: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_template_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_get(self, id, **kwargs):
        """
        Queries templateFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_template_folders_get_with_http_info(id, **kwargs)
            return data

    def teams_id_template_folders_get_with_http_info(self, id, **kwargs):
        """
        Queries templateFolders of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[TeamTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamTemplateFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_template_folders_post(self, id, **kwargs):
        """
        Creates a new instance in templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamTemplateFolder data: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_template_folders_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_template_folders_post_with_http_info(id, **kwargs)
            return data

    def teams_id_template_folders_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in templateFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_template_folders_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param TeamTemplateFolder data: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_template_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_template_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templateFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_count_get(self, id, **kwargs):
        """
        Counts templates of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_templates_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_templates_count_get_with_http_info(self, id, **kwargs):
        """
        Counts templates of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_delete(self, id, **kwargs):
        """
        Deletes all templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_templates_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_templates_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_templates_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_templates_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_templates_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for templates.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for templates (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_get(self, id, **kwargs):
        """
        Queries templates of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_templates_get_with_http_info(id, **kwargs)
            return data

    def teams_id_templates_get_with_http_info(self, id, **kwargs):
        """
        Queries templates of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Template]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_count_get(self, id, nk, **kwargs):
        """
        Counts designs of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_designs_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts designs of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_delete(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_designs_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_designs_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_designs_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_designs_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_designs_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_designs_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for designs.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for designs (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_designs_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_get(self, id, nk, **kwargs):
        """
        Queries designs of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_designs_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries designs of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Design]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Design]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_designs_post(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_designs_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_designs_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_designs_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in designs of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_designs_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Design data: 
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_designs_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_designs_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_designs_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/designs'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Design',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_count_get(self, id, nk, **kwargs):
        """
        Counts members of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts members of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_delete(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_get(self, id, nk, **kwargs):
        """
        Queries members of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries members of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[TeamMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TeamMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in members of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TeamMember data: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of members relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_members_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_members_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_members_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for members.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_members_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for members (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_members_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_members_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_members_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_members_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/members/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_permission_delete(self, id, nk, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_permission_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_permission_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_permission_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_permission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_permission_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_permission_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_permission_get(self, id, nk, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_permission_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_permission_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_permission_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches hasOne relation permission.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_permission_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_permission_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_permission_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplatePermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_permission_post(self, id, nk, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplatePermissionSet data: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_permission_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_permission_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_permission_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplatePermissionSet data: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_permission_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_permission_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_permission_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplatePermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_permission_put(self, id, nk, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_put(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplatePermissionSet data: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_permission_put_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_permission_put_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_permission_put_with_http_info(self, id, nk, **kwargs):
        """
        Update permission of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_permission_put_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplatePermissionSet data: 
        :return: TemplatePermissionSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_permission_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_permission_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_permission_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/permission'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplatePermissionSet',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_count_get(self, id, nk, **kwargs):
        """
        Counts portalFolders of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts portalFolders of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_delete(self, id, nk, **kwargs):
        """
        Deletes all portalFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all portalFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_get(self, id, nk, **kwargs):
        """
        Queries portalFolders of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[PortalTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries portalFolders of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[PortalTemplateFolder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[PortalTemplateFolder]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_post(self, id, nk, **kwargs):
        """
        Creates a new instance in portalFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in portalFolders of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param PortalTemplateFolder data: 
        :return: PortalTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the portalFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the portalFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of portalFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of portalFolders relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portal_folders_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portal_folders_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portal_folders_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portal_folders_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portalFolders.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portal_folders_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portalFolders (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portal_folders_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portal_folders_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portal_folders_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portal_folders_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portalFolders/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_count_get(self, id, nk, **kwargs):
        """
        Counts portals of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portals_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts portals of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_delete(self, id, nk, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portals_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_get(self, id, nk, **kwargs):
        """
        Queries portals of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portals_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries portals of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Portal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Portal]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_post(self, id, nk, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_portals_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in portals of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Portal data: 
        :return: Portal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of portals relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_portals_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_portals_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_portals_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_portals_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for portals.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_portals_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for portals (required)
        :param PortalTemplate data: 
        :return: PortalTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_portals_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_portals_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_portals_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_portals_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/portals/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortalTemplate',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_count_get(self, id, nk, **kwargs):
        """
        Counts tags of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_tags_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts tags of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_delete(self, id, nk, **kwargs):
        """
        Deletes all tags of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_tags_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all tags of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Tag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :param Tag data: 
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :param Tag data: 
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Tag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_get(self, id, nk, **kwargs):
        """
        Queries tags of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_tags_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries tags of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[Tag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Tag]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_post(self, id, nk, **kwargs):
        """
        Creates a new instance in tags of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Tag data: 
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_tags_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in tags of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param Tag data: 
        :return: Tag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Tag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_rel_fk_delete(self, id, nk, fk, **kwargs):
        """
        Remove the tags relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_rel_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_rel_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Remove the tags relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_rel_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_rel_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_rel_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_rel_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_rel_fk_head(self, id, nk, fk, **kwargs):
        """
        Check the existence of tags relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_head(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_rel_fk_head_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_rel_fk_head_with_http_info(self, id, nk, fk, **kwargs):
        """
        Check the existence of tags relation to an item by id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_head_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_rel_fk_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_rel_fk_head`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_rel_fk_head`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_rel_fk_head`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'HEAD',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='bool',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_tags_rel_fk_put(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :param TemplateTag data: 
        :return: TemplateTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_tags_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_tags_rel_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_tags_rel_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Add a related item by id for tags.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_tags_rel_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for tags (required)
        :param TemplateTag data: 
        :return: TemplateTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_tags_rel_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_tags_rel_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_tags_rel_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_tags_rel_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/tags/rel/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateTag',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_team_folder_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation teamFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_team_folder_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_team_folder_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_team_folder_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_team_folder_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation teamFolder.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_team_folder_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TeamTemplateFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_team_folder_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_team_folder_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_team_folder_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/teamFolder'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamTemplateFolder',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_team_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_team_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_team_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_team_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_team_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_team_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_team_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_team_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_team_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/team'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_count_get(self, id, nk, **kwargs):
        """
        Counts templateMembers of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_count_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_count_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_count_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_count_get_with_http_info(self, id, nk, **kwargs):
        """
        Counts templateMembers of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_count_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_count_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_delete(self, id, nk, **kwargs):
        """
        Deletes all templateMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_delete(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_delete_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_delete_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_delete_with_http_info(self, id, nk, **kwargs):
        """
        Deletes all templateMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_delete_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_fk_delete(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_delete(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_fk_delete_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_fk_delete_with_http_info(self, id, nk, fk, **kwargs):
        """
        Delete a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_delete_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_fk_delete`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_template_members_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_fk_get(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_get(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_fk_get_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_fk_get_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_fk_get_with_http_info(self, id, nk, fk, **kwargs):
        """
        Find a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_get_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_fk_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_template_members_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_fk_put(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_put(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_fk_put_with_http_info(id, nk, fk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_fk_put_with_http_info(id, nk, fk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_fk_put_with_http_info(self, id, nk, fk, **kwargs):
        """
        Update a related item by id for templateMembers.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_fk_put_with_http_info(id, nk, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str fk: Foreign key for templateMembers (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_fk_put`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_templates_nk_template_members_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_get(self, id, nk, **kwargs):
        """
        Queries templateMembers of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[TemplateMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_get_with_http_info(self, id, nk, **kwargs):
        """
        Queries templateMembers of Template.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param str filter: 
        :return: list[TemplateMember]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TemplateMember]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_template_members_post(self, id, nk, **kwargs):
        """
        Creates a new instance in templateMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_post(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_template_members_post_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_template_members_post_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_template_members_post_with_http_info(self, id, nk, **kwargs):
        """
        Creates a new instance in templateMembers of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_template_members_post_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param TemplateMember data: 
        :return: TemplateMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_template_members_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_template_members_post`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_template_members_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/templateMembers'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_uploader_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation uploader.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_uploader_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_uploader_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_uploader_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_uploader_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation uploader.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_uploader_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: TeamMember
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_uploader_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_uploader_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_uploader_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/uploader'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TeamMember',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_nk_workflow_get(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation workflow.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_workflow_get(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_nk_workflow_get_with_http_info(id, nk, **kwargs)
        else:
            (data) = self.teams_id_templates_nk_workflow_get_with_http_info(id, nk, **kwargs)
            return data

    def teams_id_templates_nk_workflow_get_with_http_info(self, id, nk, **kwargs):
        """
        Fetches belongsTo relation workflow.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_nk_workflow_get_with_http_info(id, nk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str nk: Foreign key for templates. (required)
        :param bool refresh: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nk', 'refresh']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_nk_workflow_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_nk_workflow_get`")
        # verify the required parameter 'nk' is set
        if ('nk' not in params) or (params['nk'] is None):
            raise ValueError("Missing the required parameter `nk` when calling `teams_id_templates_nk_workflow_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates/{nk}/workflow'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'nk' in params:
            path_params['nk'] = params['nk']

        query_params = {}
        if 'refresh' in params:
            query_params['refresh'] = params['refresh']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Workflow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_post(self, id, **kwargs):
        """
        Creates a new instance in templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_templates_post_with_http_info(id, **kwargs)
            return data

    def teams_id_templates_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in templates of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Template data: 
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templates'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Template',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_templates_with_designs_get(self, id, id2, **kwargs):
        """
        List Templates with Designs for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_with_designs_get(id, id2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_templates_with_designs_get_with_http_info(id, id2, **kwargs)
        else:
            (data) = self.teams_id_templates_with_designs_get_with_http_info(id, id2, **kwargs)
            return data

    def teams_id_templates_with_designs_get_with_http_info(self, id, id2, **kwargs):
        """
        List Templates with Designs for this Team
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_templates_with_designs_get_with_http_info(id, id2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str id2: Team id (required)
        :param str filter: Filter defining fields and include - must be a JSON-encoded string ({\"something\":\"value\"})
        :return: list[Template]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_templates_with_designs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_templates_with_designs_get`")
        # verify the required parameter 'id2' is set
        if ('id2' not in params) or (params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `teams_id_templates_with_designs_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/templatesWithDesigns'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id2' in params:
            path_params['id'] = params['id2']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Template]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_count_get(self, id, **kwargs):
        """
        Counts workflows of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_count_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_count_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_workflows_count_get_with_http_info(id, **kwargs)
            return data

    def teams_id_workflows_count_get_with_http_info(self, id, **kwargs):
        """
        Counts workflows of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_count_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str where: Criteria to match model instances
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'where']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_count_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_count_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows/count'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_delete(self, id, **kwargs):
        """
        Deletes all workflows of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_delete_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_workflows_delete_with_http_info(id, **kwargs)
            return data

    def teams_id_workflows_delete_with_http_info(self, id, **kwargs):
        """
        Deletes all workflows of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_fk_delete(self, id, fk, **kwargs):
        """
        Delete a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_delete(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_fk_delete_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_workflows_fk_delete_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_workflows_fk_delete_with_http_info(self, id, fk, **kwargs):
        """
        Delete a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_delete_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_fk_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_fk_delete`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_workflows_fk_delete`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_fk_get(self, id, fk, **kwargs):
        """
        Find a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_get(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_fk_get_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_workflows_fk_get_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_workflows_fk_get_with_http_info(self, id, fk, **kwargs):
        """
        Find a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_get_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_fk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_fk_get`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_workflows_fk_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Workflow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_fk_put(self, id, fk, **kwargs):
        """
        Update a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_put(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :param Workflow data: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_fk_put_with_http_info(id, fk, **kwargs)
        else:
            (data) = self.teams_id_workflows_fk_put_with_http_info(id, fk, **kwargs)
            return data

    def teams_id_workflows_fk_put_with_http_info(self, id, fk, **kwargs):
        """
        Update a related item by id for workflows.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_fk_put_with_http_info(id, fk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str fk: Foreign key for workflows (required)
        :param Workflow data: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fk', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_fk_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_fk_put`")
        # verify the required parameter 'fk' is set
        if ('fk' not in params) or (params['fk'] is None):
            raise ValueError("Missing the required parameter `fk` when calling `teams_id_workflows_fk_put`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows/{fk}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'fk' in params:
            path_params['fk'] = params['fk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Workflow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_get(self, id, **kwargs):
        """
        Queries workflows of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_get_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_workflows_get_with_http_info(id, **kwargs)
            return data

    def teams_id_workflows_get_with_http_info(self, id, **kwargs):
        """
        Queries workflows of Team.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param str filter: 
        :return: list[Workflow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_get`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'filter' in params:
            query_params['filter'] = params['filter']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Workflow]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_id_workflows_post(self, id, **kwargs):
        """
        Creates a new instance in workflows of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Workflow data: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_id_workflows_post_with_http_info(id, **kwargs)
        else:
            (data) = self.teams_id_workflows_post_with_http_info(id, **kwargs)
            return data

    def teams_id_workflows_post_with_http_info(self, id, **kwargs):
        """
        Creates a new instance in workflows of this model.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_id_workflows_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Team id (required)
        :param Workflow data: 
        :return: Workflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_id_workflows_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `teams_id_workflows_post`")


        collection_formats = {}

        resource_path = '/Teams/{id}/workflows'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Workflow',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_name_name_exists_get(self, name, **kwargs):
        """
        Define whether team exists or not
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_name_name_exists_get(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Team name (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_name_name_exists_get_with_http_info(name, **kwargs)
        else:
            (data) = self.teams_name_name_exists_get_with_http_info(name, **kwargs)
            return data

    def teams_name_name_exists_get_with_http_info(self, name, **kwargs):
        """
        Define whether team exists or not
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_name_name_exists_get_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Team name (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_name_name_exists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `teams_name_name_exists_get`")


        collection_formats = {}

        resource_path = '/Teams/name/{name}/exists'.replace('{format}', 'json')
        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_patch(self, **kwargs):
        """
        Patch an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_patch(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_patch_with_http_info(**kwargs)
        else:
            (data) = self.teams_patch_with_http_info(**kwargs)
            return data

    def teams_patch_with_http_info(self, **kwargs):
        """
        Patch an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_patch_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_patch" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_post(self, **kwargs):
        """
        Create a new instance of the model and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_post_with_http_info(**kwargs)
        else:
            (data) = self.teams_post_with_http_info(**kwargs)
            return data

    def teams_post_with_http_info(self, **kwargs):
        """
        Create a new instance of the model and persist it into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_put(self, **kwargs):
        """
        Replace an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_put(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_put_with_http_info(**kwargs)
        else:
            (data) = self.teams_put_with_http_info(**kwargs)
            return data

    def teams_put_with_http_info(self, **kwargs):
        """
        Replace an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_put_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_put" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_replace_or_create_post(self, **kwargs):
        """
        Replace an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_replace_or_create_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_replace_or_create_post_with_http_info(**kwargs)
        else:
            (data) = self.teams_replace_or_create_post_with_http_info(**kwargs)
            return data

    def teams_replace_or_create_post_with_http_info(self, **kwargs):
        """
        Replace an existing model instance or insert a new one into the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_replace_or_create_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Team data: Model instance data
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_replace_or_create_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/replaceOrCreate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_subdomain_subdomain_exists_get(self, subdomain, **kwargs):
        """
        Define whether team exists or not
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_subdomain_subdomain_exists_get(subdomain, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subdomain: Team subdomain (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_subdomain_subdomain_exists_get_with_http_info(subdomain, **kwargs)
        else:
            (data) = self.teams_subdomain_subdomain_exists_get_with_http_info(subdomain, **kwargs)
            return data

    def teams_subdomain_subdomain_exists_get_with_http_info(self, subdomain, **kwargs):
        """
        Define whether team exists or not
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_subdomain_subdomain_exists_get_with_http_info(subdomain, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subdomain: Team subdomain (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subdomain']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_subdomain_subdomain_exists_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subdomain' is set
        if ('subdomain' not in params) or (params['subdomain'] is None):
            raise ValueError("Missing the required parameter `subdomain` when calling `teams_subdomain_subdomain_exists_get`")


        collection_formats = {}

        resource_path = '/Teams/subdomain/{subdomain}/exists'.replace('{format}', 'json')
        path_params = {}
        if 'subdomain' in params:
            path_params['subdomain'] = params['subdomain']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_update_post(self, **kwargs):
        """
        Update instances of the model matched by {{where}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_update_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :param Team data: An object of model property name/value pairs
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_update_post_with_http_info(**kwargs)
        else:
            (data) = self.teams_update_post_with_http_info(**kwargs)
            return data

    def teams_update_post_with_http_info(self, **kwargs):
        """
        Update instances of the model matched by {{where}} from the data source.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_update_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :param Team data: An object of model property name/value pairs
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_update_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/update'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2002',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def teams_upsert_with_where_post(self, **kwargs):
        """
        Update an existing model instance or insert a new one into the data source based on the where criteria.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_upsert_with_where_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :param Team data: An object of model property name/value pairs
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.teams_upsert_with_where_post_with_http_info(**kwargs)
        else:
            (data) = self.teams_upsert_with_where_post_with_http_info(**kwargs)
            return data

    def teams_upsert_with_where_post_with_http_info(self, **kwargs):
        """
        Update an existing model instance or insert a new one into the data source based on the where criteria.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.teams_upsert_with_where_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str where: Criteria to match model instances
        :param Team data: An object of model property name/value pairs
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['where', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method teams_upsert_with_where_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/Teams/upsertWithWhere'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'where' in params:
            query_params['where'] = params['where']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'])

        # Authentication setting
        auth_settings = ['access_token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Team',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)
