# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.0-alpha.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, chain=None, events=None, status='queued', params=None, queue='default', count=0.0, attempts=5.0, remaining=5.0, delay=None, priority=0.0, ended=None, enqueued=None, result=None, error=None, stack=None, id=None, item_id=None, item_type=None):
        """
        QTask - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chain': 'list[str]',
            'events': 'list[object]',
            'status': 'str',
            'params': 'object',
            'queue': 'str',
            'count': 'float',
            'attempts': 'float',
            'remaining': 'float',
            'delay': 'datetime',
            'priority': 'float',
            'ended': 'datetime',
            'enqueued': 'datetime',
            'result': 'object',
            'error': 'object',
            'stack': 'object',
            'id': 'ObjectID',
            'item_id': 'ObjectID',
            'item_type': 'str'
        }

        self.attribute_map = {
            'chain': 'chain',
            'events': 'events',
            'status': 'status',
            'params': 'params',
            'queue': 'queue',
            'count': 'count',
            'attempts': 'attempts',
            'remaining': 'remaining',
            'delay': 'delay',
            'priority': 'priority',
            'ended': 'ended',
            'enqueued': 'enqueued',
            'result': 'result',
            'error': 'error',
            'stack': 'stack',
            'id': 'id',
            'item_id': 'itemId',
            'item_type': 'itemType'
        }

        self._chain = chain
        self._events = events
        self._status = status
        self._params = params
        self._queue = queue
        self._count = count
        self._attempts = attempts
        self._remaining = remaining
        self._delay = delay
        self._priority = priority
        self._ended = ended
        self._enqueued = enqueued
        self._result = result
        self._error = error
        self._stack = stack
        self._id = id
        self._item_id = item_id
        self._item_type = item_type


    @property
    def chain(self):
        """
        Gets the chain of this QTask.


        :return: The chain of this QTask.
        :rtype: list[str]
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """
        Sets the chain of this QTask.


        :param chain: The chain of this QTask.
        :type: list[str]
        """

        self._chain = chain

    @property
    def events(self):
        """
        Gets the events of this QTask.


        :return: The events of this QTask.
        :rtype: list[object]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this QTask.


        :param events: The events of this QTask.
        :type: list[object]
        """

        self._events = events

    @property
    def status(self):
        """
        Gets the status of this QTask.


        :return: The status of this QTask.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this QTask.


        :param status: The status of this QTask.
        :type: str
        """

        self._status = status

    @property
    def params(self):
        """
        Gets the params of this QTask.


        :return: The params of this QTask.
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this QTask.


        :param params: The params of this QTask.
        :type: object
        """

        self._params = params

    @property
    def queue(self):
        """
        Gets the queue of this QTask.


        :return: The queue of this QTask.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """
        Sets the queue of this QTask.


        :param queue: The queue of this QTask.
        :type: str
        """

        self._queue = queue

    @property
    def count(self):
        """
        Gets the count of this QTask.


        :return: The count of this QTask.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this QTask.


        :param count: The count of this QTask.
        :type: float
        """

        self._count = count

    @property
    def attempts(self):
        """
        Gets the attempts of this QTask.


        :return: The attempts of this QTask.
        :rtype: float
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """
        Sets the attempts of this QTask.


        :param attempts: The attempts of this QTask.
        :type: float
        """

        self._attempts = attempts

    @property
    def remaining(self):
        """
        Gets the remaining of this QTask.


        :return: The remaining of this QTask.
        :rtype: float
        """
        return self._remaining

    @remaining.setter
    def remaining(self, remaining):
        """
        Sets the remaining of this QTask.


        :param remaining: The remaining of this QTask.
        :type: float
        """

        self._remaining = remaining

    @property
    def delay(self):
        """
        Gets the delay of this QTask.


        :return: The delay of this QTask.
        :rtype: datetime
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """
        Sets the delay of this QTask.


        :param delay: The delay of this QTask.
        :type: datetime
        """

        self._delay = delay

    @property
    def priority(self):
        """
        Gets the priority of this QTask.


        :return: The priority of this QTask.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this QTask.


        :param priority: The priority of this QTask.
        :type: float
        """

        self._priority = priority

    @property
    def ended(self):
        """
        Gets the ended of this QTask.


        :return: The ended of this QTask.
        :rtype: datetime
        """
        return self._ended

    @ended.setter
    def ended(self, ended):
        """
        Sets the ended of this QTask.


        :param ended: The ended of this QTask.
        :type: datetime
        """

        self._ended = ended

    @property
    def enqueued(self):
        """
        Gets the enqueued of this QTask.


        :return: The enqueued of this QTask.
        :rtype: datetime
        """
        return self._enqueued

    @enqueued.setter
    def enqueued(self, enqueued):
        """
        Sets the enqueued of this QTask.


        :param enqueued: The enqueued of this QTask.
        :type: datetime
        """

        self._enqueued = enqueued

    @property
    def result(self):
        """
        Gets the result of this QTask.


        :return: The result of this QTask.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this QTask.


        :param result: The result of this QTask.
        :type: object
        """

        self._result = result

    @property
    def error(self):
        """
        Gets the error of this QTask.


        :return: The error of this QTask.
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this QTask.


        :param error: The error of this QTask.
        :type: object
        """

        self._error = error

    @property
    def stack(self):
        """
        Gets the stack of this QTask.


        :return: The stack of this QTask.
        :rtype: object
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """
        Sets the stack of this QTask.


        :param stack: The stack of this QTask.
        :type: object
        """

        self._stack = stack

    @property
    def id(self):
        """
        Gets the id of this QTask.


        :return: The id of this QTask.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QTask.


        :param id: The id of this QTask.
        :type: ObjectID
        """

        self._id = id

    @property
    def item_id(self):
        """
        Gets the item_id of this QTask.


        :return: The item_id of this QTask.
        :rtype: ObjectID
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this QTask.


        :param item_id: The item_id of this QTask.
        :type: ObjectID
        """

        self._item_id = item_id

    @property
    def item_type(self):
        """
        Gets the item_type of this QTask.


        :return: The item_type of this QTask.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this QTask.


        :param item_type: The item_type of this QTask.
        :type: str
        """

        self._item_type = item_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
