# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 0.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TeamMember(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, roles=None, position=None, office_phone=None, mobile_phone=None, website=None, address_city=None, address_country=None, address_line1=None, address_line2=None, address_state=None, address_zip=None, created=None, modified=None, id=None, customer_id=None, team_id=None, customer=None, team=None, portals=None, uploaded_templates=None, templates=None, invitation_tickets=None, requested_designs=None, requested_design_exports=None, assigned_designs=None, reviewed_designs=None, commented_designs=None, design_comments=None, design_folders=None, workflows=None, image_folders=None):
        """
        TeamMember - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'roles': 'list[str]',
            'position': 'str',
            'office_phone': 'str',
            'mobile_phone': 'str',
            'website': 'str',
            'address_city': 'str',
            'address_country': 'str',
            'address_line1': 'str',
            'address_line2': 'str',
            'address_state': 'str',
            'address_zip': 'str',
            'created': 'datetime',
            'modified': 'datetime',
            'id': 'str',
            'customer_id': 'str',
            'team_id': 'str',
            'customer': 'Customer',
            'team': 'Team',
            'portals': 'list[Portal]',
            'uploaded_templates': 'list[Template]',
            'templates': 'list[Template]',
            'invitation_tickets': 'list[InvitationTicket]',
            'requested_designs': 'list[Design]',
            'requested_design_exports': 'list[DesignExport]',
            'assigned_designs': 'list[Design]',
            'reviewed_designs': 'list[Design]',
            'commented_designs': 'list[Design]',
            'design_comments': 'list[DesignComment]',
            'design_folders': 'list[DesignFolder]',
            'workflows': 'list[Workflow]',
            'image_folders': 'list[ImageFolder]'
        }

        self.attribute_map = {
            'roles': 'roles',
            'position': 'position',
            'office_phone': 'officePhone',
            'mobile_phone': 'mobilePhone',
            'website': 'website',
            'address_city': 'addressCity',
            'address_country': 'addressCountry',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'address_state': 'addressState',
            'address_zip': 'addressZip',
            'created': 'created',
            'modified': 'modified',
            'id': 'id',
            'customer_id': 'customerId',
            'team_id': 'teamId',
            'customer': 'customer',
            'team': 'team',
            'portals': 'portals',
            'uploaded_templates': 'uploadedTemplates',
            'templates': 'templates',
            'invitation_tickets': 'invitationTickets',
            'requested_designs': 'requestedDesigns',
            'requested_design_exports': 'requestedDesignExports',
            'assigned_designs': 'assignedDesigns',
            'reviewed_designs': 'reviewedDesigns',
            'commented_designs': 'commentedDesigns',
            'design_comments': 'designComments',
            'design_folders': 'designFolders',
            'workflows': 'workflows',
            'image_folders': 'imageFolders'
        }

        self._roles = roles
        self._position = position
        self._office_phone = office_phone
        self._mobile_phone = mobile_phone
        self._website = website
        self._address_city = address_city
        self._address_country = address_country
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_state = address_state
        self._address_zip = address_zip
        self._created = created
        self._modified = modified
        self._id = id
        self._customer_id = customer_id
        self._team_id = team_id
        self._customer = customer
        self._team = team
        self._portals = portals
        self._uploaded_templates = uploaded_templates
        self._templates = templates
        self._invitation_tickets = invitation_tickets
        self._requested_designs = requested_designs
        self._requested_design_exports = requested_design_exports
        self._assigned_designs = assigned_designs
        self._reviewed_designs = reviewed_designs
        self._commented_designs = commented_designs
        self._design_comments = design_comments
        self._design_folders = design_folders
        self._workflows = workflows
        self._image_folders = image_folders


    @property
    def roles(self):
        """
        Gets the roles of this TeamMember.


        :return: The roles of this TeamMember.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this TeamMember.


        :param roles: The roles of this TeamMember.
        :type: list[str]
        """

        self._roles = roles

    @property
    def position(self):
        """
        Gets the position of this TeamMember.


        :return: The position of this TeamMember.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this TeamMember.


        :param position: The position of this TeamMember.
        :type: str
        """

        self._position = position

    @property
    def office_phone(self):
        """
        Gets the office_phone of this TeamMember.


        :return: The office_phone of this TeamMember.
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """
        Sets the office_phone of this TeamMember.


        :param office_phone: The office_phone of this TeamMember.
        :type: str
        """

        self._office_phone = office_phone

    @property
    def mobile_phone(self):
        """
        Gets the mobile_phone of this TeamMember.


        :return: The mobile_phone of this TeamMember.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """
        Sets the mobile_phone of this TeamMember.


        :param mobile_phone: The mobile_phone of this TeamMember.
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def website(self):
        """
        Gets the website of this TeamMember.


        :return: The website of this TeamMember.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this TeamMember.


        :param website: The website of this TeamMember.
        :type: str
        """

        self._website = website

    @property
    def address_city(self):
        """
        Gets the address_city of this TeamMember.


        :return: The address_city of this TeamMember.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """
        Sets the address_city of this TeamMember.


        :param address_city: The address_city of this TeamMember.
        :type: str
        """

        self._address_city = address_city

    @property
    def address_country(self):
        """
        Gets the address_country of this TeamMember.


        :return: The address_country of this TeamMember.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """
        Sets the address_country of this TeamMember.


        :param address_country: The address_country of this TeamMember.
        :type: str
        """

        self._address_country = address_country

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this TeamMember.


        :return: The address_line1 of this TeamMember.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this TeamMember.


        :param address_line1: The address_line1 of this TeamMember.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this TeamMember.


        :return: The address_line2 of this TeamMember.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this TeamMember.


        :param address_line2: The address_line2 of this TeamMember.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_state(self):
        """
        Gets the address_state of this TeamMember.


        :return: The address_state of this TeamMember.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this TeamMember.


        :param address_state: The address_state of this TeamMember.
        :type: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """
        Gets the address_zip of this TeamMember.


        :return: The address_zip of this TeamMember.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """
        Sets the address_zip of this TeamMember.


        :param address_zip: The address_zip of this TeamMember.
        :type: str
        """

        self._address_zip = address_zip

    @property
    def created(self):
        """
        Gets the created of this TeamMember.


        :return: The created of this TeamMember.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this TeamMember.


        :param created: The created of this TeamMember.
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """
        Gets the modified of this TeamMember.


        :return: The modified of this TeamMember.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this TeamMember.


        :param modified: The modified of this TeamMember.
        :type: datetime
        """

        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this TeamMember.


        :return: The id of this TeamMember.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TeamMember.


        :param id: The id of this TeamMember.
        :type: str
        """

        self._id = id

    @property
    def customer_id(self):
        """
        Gets the customer_id of this TeamMember.


        :return: The customer_id of this TeamMember.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this TeamMember.


        :param customer_id: The customer_id of this TeamMember.
        :type: str
        """

        self._customer_id = customer_id

    @property
    def team_id(self):
        """
        Gets the team_id of this TeamMember.


        :return: The team_id of this TeamMember.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this TeamMember.


        :param team_id: The team_id of this TeamMember.
        :type: str
        """

        self._team_id = team_id

    @property
    def customer(self):
        """
        Gets the customer of this TeamMember.


        :return: The customer of this TeamMember.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this TeamMember.


        :param customer: The customer of this TeamMember.
        :type: Customer
        """

        self._customer = customer

    @property
    def team(self):
        """
        Gets the team of this TeamMember.


        :return: The team of this TeamMember.
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this TeamMember.


        :param team: The team of this TeamMember.
        :type: Team
        """

        self._team = team

    @property
    def portals(self):
        """
        Gets the portals of this TeamMember.


        :return: The portals of this TeamMember.
        :rtype: list[Portal]
        """
        return self._portals

    @portals.setter
    def portals(self, portals):
        """
        Sets the portals of this TeamMember.


        :param portals: The portals of this TeamMember.
        :type: list[Portal]
        """

        self._portals = portals

    @property
    def uploaded_templates(self):
        """
        Gets the uploaded_templates of this TeamMember.


        :return: The uploaded_templates of this TeamMember.
        :rtype: list[Template]
        """
        return self._uploaded_templates

    @uploaded_templates.setter
    def uploaded_templates(self, uploaded_templates):
        """
        Sets the uploaded_templates of this TeamMember.


        :param uploaded_templates: The uploaded_templates of this TeamMember.
        :type: list[Template]
        """

        self._uploaded_templates = uploaded_templates

    @property
    def templates(self):
        """
        Gets the templates of this TeamMember.


        :return: The templates of this TeamMember.
        :rtype: list[Template]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """
        Sets the templates of this TeamMember.


        :param templates: The templates of this TeamMember.
        :type: list[Template]
        """

        self._templates = templates

    @property
    def invitation_tickets(self):
        """
        Gets the invitation_tickets of this TeamMember.


        :return: The invitation_tickets of this TeamMember.
        :rtype: list[InvitationTicket]
        """
        return self._invitation_tickets

    @invitation_tickets.setter
    def invitation_tickets(self, invitation_tickets):
        """
        Sets the invitation_tickets of this TeamMember.


        :param invitation_tickets: The invitation_tickets of this TeamMember.
        :type: list[InvitationTicket]
        """

        self._invitation_tickets = invitation_tickets

    @property
    def requested_designs(self):
        """
        Gets the requested_designs of this TeamMember.


        :return: The requested_designs of this TeamMember.
        :rtype: list[Design]
        """
        return self._requested_designs

    @requested_designs.setter
    def requested_designs(self, requested_designs):
        """
        Sets the requested_designs of this TeamMember.


        :param requested_designs: The requested_designs of this TeamMember.
        :type: list[Design]
        """

        self._requested_designs = requested_designs

    @property
    def requested_design_exports(self):
        """
        Gets the requested_design_exports of this TeamMember.


        :return: The requested_design_exports of this TeamMember.
        :rtype: list[DesignExport]
        """
        return self._requested_design_exports

    @requested_design_exports.setter
    def requested_design_exports(self, requested_design_exports):
        """
        Sets the requested_design_exports of this TeamMember.


        :param requested_design_exports: The requested_design_exports of this TeamMember.
        :type: list[DesignExport]
        """

        self._requested_design_exports = requested_design_exports

    @property
    def assigned_designs(self):
        """
        Gets the assigned_designs of this TeamMember.


        :return: The assigned_designs of this TeamMember.
        :rtype: list[Design]
        """
        return self._assigned_designs

    @assigned_designs.setter
    def assigned_designs(self, assigned_designs):
        """
        Sets the assigned_designs of this TeamMember.


        :param assigned_designs: The assigned_designs of this TeamMember.
        :type: list[Design]
        """

        self._assigned_designs = assigned_designs

    @property
    def reviewed_designs(self):
        """
        Gets the reviewed_designs of this TeamMember.


        :return: The reviewed_designs of this TeamMember.
        :rtype: list[Design]
        """
        return self._reviewed_designs

    @reviewed_designs.setter
    def reviewed_designs(self, reviewed_designs):
        """
        Sets the reviewed_designs of this TeamMember.


        :param reviewed_designs: The reviewed_designs of this TeamMember.
        :type: list[Design]
        """

        self._reviewed_designs = reviewed_designs

    @property
    def commented_designs(self):
        """
        Gets the commented_designs of this TeamMember.


        :return: The commented_designs of this TeamMember.
        :rtype: list[Design]
        """
        return self._commented_designs

    @commented_designs.setter
    def commented_designs(self, commented_designs):
        """
        Sets the commented_designs of this TeamMember.


        :param commented_designs: The commented_designs of this TeamMember.
        :type: list[Design]
        """

        self._commented_designs = commented_designs

    @property
    def design_comments(self):
        """
        Gets the design_comments of this TeamMember.


        :return: The design_comments of this TeamMember.
        :rtype: list[DesignComment]
        """
        return self._design_comments

    @design_comments.setter
    def design_comments(self, design_comments):
        """
        Sets the design_comments of this TeamMember.


        :param design_comments: The design_comments of this TeamMember.
        :type: list[DesignComment]
        """

        self._design_comments = design_comments

    @property
    def design_folders(self):
        """
        Gets the design_folders of this TeamMember.


        :return: The design_folders of this TeamMember.
        :rtype: list[DesignFolder]
        """
        return self._design_folders

    @design_folders.setter
    def design_folders(self, design_folders):
        """
        Sets the design_folders of this TeamMember.


        :param design_folders: The design_folders of this TeamMember.
        :type: list[DesignFolder]
        """

        self._design_folders = design_folders

    @property
    def workflows(self):
        """
        Gets the workflows of this TeamMember.


        :return: The workflows of this TeamMember.
        :rtype: list[Workflow]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this TeamMember.


        :param workflows: The workflows of this TeamMember.
        :type: list[Workflow]
        """

        self._workflows = workflows

    @property
    def image_folders(self):
        """
        Gets the image_folders of this TeamMember.


        :return: The image_folders of this TeamMember.
        :rtype: list[ImageFolder]
        """
        return self._image_folders

    @image_folders.setter
    def image_folders(self, image_folders):
        """
        Sets the image_folders of this TeamMember.


        :param image_folders: The image_folders of this TeamMember.
        :type: list[ImageFolder]
        """

        self._image_folders = image_folders

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
