# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.8-beta.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, object='source', amount=None, client_secret=None, created=None, currency=None, flow=None, livemode=None, owner=None, receiver=None, statement_descriptor=None, status=None, type=None, usage=None, ach_credit_transfer=None, sepa_debit=None, sofort=None, redirect=None, token=None):
        """
        BillingSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'object': 'str',
            'amount': 'float',
            'client_secret': 'str',
            'created': 'float',
            'currency': 'str',
            'flow': 'str',
            'livemode': 'bool',
            'owner': 'BillingSourceOwner',
            'receiver': 'BillingSourceReceiver',
            'statement_descriptor': 'str',
            'status': 'str',
            'type': 'str',
            'usage': 'str',
            'ach_credit_transfer': 'BillingSourceAchCreditTransfer',
            'sepa_debit': 'BillingSourceSepaDebit',
            'sofort': 'BillingSourceSofort',
            'redirect': 'BillingSourceRedirect',
            'token': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'amount': 'amount',
            'client_secret': 'clientSecret',
            'created': 'created',
            'currency': 'currency',
            'flow': 'flow',
            'livemode': 'livemode',
            'owner': 'owner',
            'receiver': 'receiver',
            'statement_descriptor': 'statementDescriptor',
            'status': 'status',
            'type': 'type',
            'usage': 'usage',
            'ach_credit_transfer': 'achCreditTransfer',
            'sepa_debit': 'sepaDebit',
            'sofort': 'sofort',
            'redirect': 'redirect',
            'token': 'token'
        }

        self._id = id
        self._object = object
        self._amount = amount
        self._client_secret = client_secret
        self._created = created
        self._currency = currency
        self._flow = flow
        self._livemode = livemode
        self._owner = owner
        self._receiver = receiver
        self._statement_descriptor = statement_descriptor
        self._status = status
        self._type = type
        self._usage = usage
        self._ach_credit_transfer = ach_credit_transfer
        self._sepa_debit = sepa_debit
        self._sofort = sofort
        self._redirect = redirect
        self._token = token


    @property
    def id(self):
        """
        Gets the id of this BillingSource.


        :return: The id of this BillingSource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BillingSource.


        :param id: The id of this BillingSource.
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """
        Gets the object of this BillingSource.


        :return: The object of this BillingSource.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this BillingSource.


        :param object: The object of this BillingSource.
        :type: str
        """

        self._object = object

    @property
    def amount(self):
        """
        Gets the amount of this BillingSource.


        :return: The amount of this BillingSource.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this BillingSource.


        :param amount: The amount of this BillingSource.
        :type: float
        """

        self._amount = amount

    @property
    def client_secret(self):
        """
        Gets the client_secret of this BillingSource.


        :return: The client_secret of this BillingSource.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this BillingSource.


        :param client_secret: The client_secret of this BillingSource.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def created(self):
        """
        Gets the created of this BillingSource.


        :return: The created of this BillingSource.
        :rtype: float
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this BillingSource.


        :param created: The created of this BillingSource.
        :type: float
        """

        self._created = created

    @property
    def currency(self):
        """
        Gets the currency of this BillingSource.


        :return: The currency of this BillingSource.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this BillingSource.


        :param currency: The currency of this BillingSource.
        :type: str
        """

        self._currency = currency

    @property
    def flow(self):
        """
        Gets the flow of this BillingSource.


        :return: The flow of this BillingSource.
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """
        Sets the flow of this BillingSource.


        :param flow: The flow of this BillingSource.
        :type: str
        """

        self._flow = flow

    @property
    def livemode(self):
        """
        Gets the livemode of this BillingSource.


        :return: The livemode of this BillingSource.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """
        Sets the livemode of this BillingSource.


        :param livemode: The livemode of this BillingSource.
        :type: bool
        """

        self._livemode = livemode

    @property
    def owner(self):
        """
        Gets the owner of this BillingSource.


        :return: The owner of this BillingSource.
        :rtype: BillingSourceOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this BillingSource.


        :param owner: The owner of this BillingSource.
        :type: BillingSourceOwner
        """

        self._owner = owner

    @property
    def receiver(self):
        """
        Gets the receiver of this BillingSource.


        :return: The receiver of this BillingSource.
        :rtype: BillingSourceReceiver
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """
        Sets the receiver of this BillingSource.


        :param receiver: The receiver of this BillingSource.
        :type: BillingSourceReceiver
        """

        self._receiver = receiver

    @property
    def statement_descriptor(self):
        """
        Gets the statement_descriptor of this BillingSource.


        :return: The statement_descriptor of this BillingSource.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """
        Sets the statement_descriptor of this BillingSource.


        :param statement_descriptor: The statement_descriptor of this BillingSource.
        :type: str
        """

        self._statement_descriptor = statement_descriptor

    @property
    def status(self):
        """
        Gets the status of this BillingSource.


        :return: The status of this BillingSource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BillingSource.


        :param status: The status of this BillingSource.
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """
        Gets the type of this BillingSource.


        :return: The type of this BillingSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BillingSource.


        :param type: The type of this BillingSource.
        :type: str
        """
        allowed_values = ["sepa_debit", "sofort"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def usage(self):
        """
        Gets the usage of this BillingSource.


        :return: The usage of this BillingSource.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """
        Sets the usage of this BillingSource.


        :param usage: The usage of this BillingSource.
        :type: str
        """

        self._usage = usage

    @property
    def ach_credit_transfer(self):
        """
        Gets the ach_credit_transfer of this BillingSource.


        :return: The ach_credit_transfer of this BillingSource.
        :rtype: BillingSourceAchCreditTransfer
        """
        return self._ach_credit_transfer

    @ach_credit_transfer.setter
    def ach_credit_transfer(self, ach_credit_transfer):
        """
        Sets the ach_credit_transfer of this BillingSource.


        :param ach_credit_transfer: The ach_credit_transfer of this BillingSource.
        :type: BillingSourceAchCreditTransfer
        """

        self._ach_credit_transfer = ach_credit_transfer

    @property
    def sepa_debit(self):
        """
        Gets the sepa_debit of this BillingSource.


        :return: The sepa_debit of this BillingSource.
        :rtype: BillingSourceSepaDebit
        """
        return self._sepa_debit

    @sepa_debit.setter
    def sepa_debit(self, sepa_debit):
        """
        Sets the sepa_debit of this BillingSource.


        :param sepa_debit: The sepa_debit of this BillingSource.
        :type: BillingSourceSepaDebit
        """

        self._sepa_debit = sepa_debit

    @property
    def sofort(self):
        """
        Gets the sofort of this BillingSource.


        :return: The sofort of this BillingSource.
        :rtype: BillingSourceSofort
        """
        return self._sofort

    @sofort.setter
    def sofort(self, sofort):
        """
        Sets the sofort of this BillingSource.


        :param sofort: The sofort of this BillingSource.
        :type: BillingSourceSofort
        """

        self._sofort = sofort

    @property
    def redirect(self):
        """
        Gets the redirect of this BillingSource.


        :return: The redirect of this BillingSource.
        :rtype: BillingSourceRedirect
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """
        Sets the redirect of this BillingSource.


        :param redirect: The redirect of this BillingSource.
        :type: BillingSourceRedirect
        """

        self._redirect = redirect

    @property
    def token(self):
        """
        Gets the token of this BillingSource.


        :return: The token of this BillingSource.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this BillingSource.


        :param token: The token of this BillingSource.
        :type: str
        """

        self._token = token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
