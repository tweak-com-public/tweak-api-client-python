# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.6-alpha.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProductType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, code=None, description=None, thumbnail=None, created=None, modified=None, id=None, group_id=None, group=None, sizes=None):
        """
        ProductType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'code': 'str',
            'description': 'str',
            'thumbnail': 'CloudinaryImage',
            'created': 'datetime',
            'modified': 'datetime',
            'id': 'str',
            'group_id': 'str',
            'group': 'ProductGroup',
            'sizes': 'list[ProductSize]'
        }

        self.attribute_map = {
            'name': 'name',
            'code': 'code',
            'description': 'description',
            'thumbnail': 'thumbnail',
            'created': 'created',
            'modified': 'modified',
            'id': 'id',
            'group_id': 'groupId',
            'group': 'group',
            'sizes': 'sizes'
        }

        self._name = name
        self._code = code
        self._description = description
        self._thumbnail = thumbnail
        self._created = created
        self._modified = modified
        self._id = id
        self._group_id = group_id
        self._group = group
        self._sizes = sizes


    @property
    def name(self):
        """
        Gets the name of this ProductType.


        :return: The name of this ProductType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProductType.


        :param name: The name of this ProductType.
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """
        Gets the code of this ProductType.


        :return: The code of this ProductType.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this ProductType.


        :param code: The code of this ProductType.
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """
        Gets the description of this ProductType.


        :return: The description of this ProductType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProductType.


        :param description: The description of this ProductType.
        :type: str
        """

        self._description = description

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this ProductType.


        :return: The thumbnail of this ProductType.
        :rtype: CloudinaryImage
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this ProductType.


        :param thumbnail: The thumbnail of this ProductType.
        :type: CloudinaryImage
        """

        self._thumbnail = thumbnail

    @property
    def created(self):
        """
        Gets the created of this ProductType.


        :return: The created of this ProductType.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ProductType.


        :param created: The created of this ProductType.
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """
        Gets the modified of this ProductType.


        :return: The modified of this ProductType.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this ProductType.


        :param modified: The modified of this ProductType.
        :type: datetime
        """

        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this ProductType.


        :return: The id of this ProductType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductType.


        :param id: The id of this ProductType.
        :type: str
        """

        self._id = id

    @property
    def group_id(self):
        """
        Gets the group_id of this ProductType.


        :return: The group_id of this ProductType.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ProductType.


        :param group_id: The group_id of this ProductType.
        :type: str
        """

        self._group_id = group_id

    @property
    def group(self):
        """
        Gets the group of this ProductType.


        :return: The group of this ProductType.
        :rtype: ProductGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this ProductType.


        :param group: The group of this ProductType.
        :type: ProductGroup
        """

        self._group = group

    @property
    def sizes(self):
        """
        Gets the sizes of this ProductType.


        :return: The sizes of this ProductType.
        :rtype: list[ProductSize]
        """
        return self._sizes

    @sizes.setter
    def sizes(self, sizes):
        """
        Sets the sizes of this ProductType.


        :param sizes: The sizes of this ProductType.
        :type: list[ProductSize]
        """

        self._sizes = sizes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
