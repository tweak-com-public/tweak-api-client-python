# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.8-alpha.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingSourceSepaDebit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bank_code=None, country=None, fingerprint=None, last4=None, mandate_reference=None, mandate_url=None, id=None):
        """
        BillingSourceSepaDebit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bank_code': 'str',
            'country': 'str',
            'fingerprint': 'str',
            'last4': 'str',
            'mandate_reference': 'str',
            'mandate_url': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'bank_code': 'bankCode',
            'country': 'country',
            'fingerprint': 'fingerprint',
            'last4': 'last4',
            'mandate_reference': 'mandateReference',
            'mandate_url': 'mandateUrl',
            'id': 'id'
        }

        self._bank_code = bank_code
        self._country = country
        self._fingerprint = fingerprint
        self._last4 = last4
        self._mandate_reference = mandate_reference
        self._mandate_url = mandate_url
        self._id = id


    @property
    def bank_code(self):
        """
        Gets the bank_code of this BillingSourceSepaDebit.


        :return: The bank_code of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """
        Sets the bank_code of this BillingSourceSepaDebit.


        :param bank_code: The bank_code of this BillingSourceSepaDebit.
        :type: str
        """

        self._bank_code = bank_code

    @property
    def country(self):
        """
        Gets the country of this BillingSourceSepaDebit.


        :return: The country of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this BillingSourceSepaDebit.


        :param country: The country of this BillingSourceSepaDebit.
        :type: str
        """

        self._country = country

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this BillingSourceSepaDebit.


        :return: The fingerprint of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this BillingSourceSepaDebit.


        :param fingerprint: The fingerprint of this BillingSourceSepaDebit.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def last4(self):
        """
        Gets the last4 of this BillingSourceSepaDebit.


        :return: The last4 of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """
        Sets the last4 of this BillingSourceSepaDebit.


        :param last4: The last4 of this BillingSourceSepaDebit.
        :type: str
        """

        self._last4 = last4

    @property
    def mandate_reference(self):
        """
        Gets the mandate_reference of this BillingSourceSepaDebit.


        :return: The mandate_reference of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._mandate_reference

    @mandate_reference.setter
    def mandate_reference(self, mandate_reference):
        """
        Sets the mandate_reference of this BillingSourceSepaDebit.


        :param mandate_reference: The mandate_reference of this BillingSourceSepaDebit.
        :type: str
        """

        self._mandate_reference = mandate_reference

    @property
    def mandate_url(self):
        """
        Gets the mandate_url of this BillingSourceSepaDebit.


        :return: The mandate_url of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._mandate_url

    @mandate_url.setter
    def mandate_url(self, mandate_url):
        """
        Sets the mandate_url of this BillingSourceSepaDebit.


        :param mandate_url: The mandate_url of this BillingSourceSepaDebit.
        :type: str
        """

        self._mandate_url = mandate_url

    @property
    def id(self):
        """
        Gets the id of this BillingSourceSepaDebit.


        :return: The id of this BillingSourceSepaDebit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BillingSourceSepaDebit.


        :param id: The id of this BillingSourceSepaDebit.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
