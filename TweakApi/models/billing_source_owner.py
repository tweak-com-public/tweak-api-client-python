# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.8-alpha.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingSourceOwner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, email=None, name=None, phone=None, verified_address=None, verified_email=None, verified_name=None, verified_phone=None, id=None):
        """
        BillingSourceOwner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'email': 'str',
            'name': 'str',
            'phone': 'str',
            'verified_address': 'str',
            'verified_email': 'str',
            'verified_name': 'str',
            'verified_phone': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'name': 'name',
            'phone': 'phone',
            'verified_address': 'verifiedAddress',
            'verified_email': 'verifiedEmail',
            'verified_name': 'verifiedName',
            'verified_phone': 'verifiedPhone',
            'id': 'id'
        }

        self._address = address
        self._email = email
        self._name = name
        self._phone = phone
        self._verified_address = verified_address
        self._verified_email = verified_email
        self._verified_name = verified_name
        self._verified_phone = verified_phone
        self._id = id


    @property
    def address(self):
        """
        Gets the address of this BillingSourceOwner.


        :return: The address of this BillingSourceOwner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this BillingSourceOwner.


        :param address: The address of this BillingSourceOwner.
        :type: str
        """

        self._address = address

    @property
    def email(self):
        """
        Gets the email of this BillingSourceOwner.


        :return: The email of this BillingSourceOwner.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this BillingSourceOwner.


        :param email: The email of this BillingSourceOwner.
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """
        Gets the name of this BillingSourceOwner.


        :return: The name of this BillingSourceOwner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BillingSourceOwner.


        :param name: The name of this BillingSourceOwner.
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """
        Gets the phone of this BillingSourceOwner.


        :return: The phone of this BillingSourceOwner.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this BillingSourceOwner.


        :param phone: The phone of this BillingSourceOwner.
        :type: str
        """

        self._phone = phone

    @property
    def verified_address(self):
        """
        Gets the verified_address of this BillingSourceOwner.


        :return: The verified_address of this BillingSourceOwner.
        :rtype: str
        """
        return self._verified_address

    @verified_address.setter
    def verified_address(self, verified_address):
        """
        Sets the verified_address of this BillingSourceOwner.


        :param verified_address: The verified_address of this BillingSourceOwner.
        :type: str
        """

        self._verified_address = verified_address

    @property
    def verified_email(self):
        """
        Gets the verified_email of this BillingSourceOwner.


        :return: The verified_email of this BillingSourceOwner.
        :rtype: str
        """
        return self._verified_email

    @verified_email.setter
    def verified_email(self, verified_email):
        """
        Sets the verified_email of this BillingSourceOwner.


        :param verified_email: The verified_email of this BillingSourceOwner.
        :type: str
        """

        self._verified_email = verified_email

    @property
    def verified_name(self):
        """
        Gets the verified_name of this BillingSourceOwner.


        :return: The verified_name of this BillingSourceOwner.
        :rtype: str
        """
        return self._verified_name

    @verified_name.setter
    def verified_name(self, verified_name):
        """
        Sets the verified_name of this BillingSourceOwner.


        :param verified_name: The verified_name of this BillingSourceOwner.
        :type: str
        """

        self._verified_name = verified_name

    @property
    def verified_phone(self):
        """
        Gets the verified_phone of this BillingSourceOwner.


        :return: The verified_phone of this BillingSourceOwner.
        :rtype: str
        """
        return self._verified_phone

    @verified_phone.setter
    def verified_phone(self, verified_phone):
        """
        Sets the verified_phone of this BillingSourceOwner.


        :param verified_phone: The verified_phone of this BillingSourceOwner.
        :type: str
        """

        self._verified_phone = verified_phone

    @property
    def id(self):
        """
        Gets the id of this BillingSourceOwner.


        :return: The id of this BillingSourceOwner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BillingSourceOwner.


        :param id: The id of this BillingSourceOwner.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
