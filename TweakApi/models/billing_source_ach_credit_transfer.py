# coding: utf-8

"""
    tweak-api

    Tweak API to integrate with all the Tweak services.  You can find out more about Tweak      at <a href='https://www.tweak.com'>https://www.tweak.com</a>, #tweak.

    OpenAPI spec version: 1.0.8-alpha.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingSourceAchCreditTransfer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_number=None, routing_number=None, fingerprint=None, bank_name=None, swift_code=None, id=None):
        """
        BillingSourceAchCreditTransfer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_number': 'str',
            'routing_number': 'str',
            'fingerprint': 'str',
            'bank_name': 'str',
            'swift_code': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'routing_number': 'routingNumber',
            'fingerprint': 'fingerprint',
            'bank_name': 'bankName',
            'swift_code': 'swiftCode',
            'id': 'id'
        }

        self._account_number = account_number
        self._routing_number = routing_number
        self._fingerprint = fingerprint
        self._bank_name = bank_name
        self._swift_code = swift_code
        self._id = id


    @property
    def account_number(self):
        """
        Gets the account_number of this BillingSourceAchCreditTransfer.


        :return: The account_number of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this BillingSourceAchCreditTransfer.


        :param account_number: The account_number of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._account_number = account_number

    @property
    def routing_number(self):
        """
        Gets the routing_number of this BillingSourceAchCreditTransfer.


        :return: The routing_number of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """
        Sets the routing_number of this BillingSourceAchCreditTransfer.


        :param routing_number: The routing_number of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._routing_number = routing_number

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this BillingSourceAchCreditTransfer.


        :return: The fingerprint of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this BillingSourceAchCreditTransfer.


        :param fingerprint: The fingerprint of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def bank_name(self):
        """
        Gets the bank_name of this BillingSourceAchCreditTransfer.


        :return: The bank_name of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """
        Sets the bank_name of this BillingSourceAchCreditTransfer.


        :param bank_name: The bank_name of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._bank_name = bank_name

    @property
    def swift_code(self):
        """
        Gets the swift_code of this BillingSourceAchCreditTransfer.


        :return: The swift_code of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._swift_code

    @swift_code.setter
    def swift_code(self, swift_code):
        """
        Sets the swift_code of this BillingSourceAchCreditTransfer.


        :param swift_code: The swift_code of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._swift_code = swift_code

    @property
    def id(self):
        """
        Gets the id of this BillingSourceAchCreditTransfer.


        :return: The id of this BillingSourceAchCreditTransfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BillingSourceAchCreditTransfer.


        :param id: The id of this BillingSourceAchCreditTransfer.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
